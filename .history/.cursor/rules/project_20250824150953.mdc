---
alwaysApply: true
---

# 핵심 개발 원칙

## 코드 품질 우선순위
- **1순위**: 기능 동작과 안정성
- **2순위**: 코드 가독성과 유지보수성  
- **3순위**: 성능 최적화
- **4순위**: 완벽한 UI/UX 매칭

## 아키텍처 분리 원칙 (우선 적용)
- **컨트롤러**: 요청 처리와 응답만 담당, 비즈니스 로직 최대한 지양
- **Form Request**: 유효성 검사와 권한 확인 담당, 컨트롤러에 유효성 검사 로직 최대한 지양
- **Service**: 비즈니스 로직 담당, 컨트롤러에서 직접 모델 조작 최대한 지양
- **Model**: 데이터베이스 관계와 쿼리 스코프만 담당, 비즈니스 로직 최대한 지양
- **View**: 데이터 표시만 담당, 로직 처리 최대한 지양

# 파일 분리 규칙 (우선 적용)

## CSS/JS 분리 (최대한 지양)
- **Blade 파일에 `<style>`, `<script>` 태그 직접 작성 최대한 지양**
- **CSS**: `public/css/` 디렉토리에 저장, Blade에서 직접 스타일링 최대한 지양
- **JS**: `public/js/` 디렉토리에 저장, Blade에서 직접 스크립트 작성 최대한 지양
- **바닐라 JS 우선, Fetch API 사용, jQuery 의존성 최소화**

## Blade 템플릿 규칙
- **데이터 표시만 담당**: `{{ }}`, `{!! !!}` 사용
- **조건문/반복문**: 최소한으로만 사용, 복잡한 로직 최대한 지양
- **PHP 로직**: `@php` 블록 사용 시 단순한 변수 할당만, 복잡한 계산 최대한 지양

# 리팩토링 규칙 (우선 적용)

## 컨트롤러 (최대한 지양)
- **최대한 지양**: 비즈니스 로직, 유효성 검사, 모델 직접 조작
- **허용**: 요청 데이터 전달, 응답 반환, 세션/리다이렉트 처리
- **우선**: 모든 비즈니스 로직은 Service 클래스로 위임

## Service 클래스 (우선 사용)
- **위치**: `app/Services/` 디렉토리에 저장
- **메서드명**: 동사+명사 형태 (예: `createBoard`, `updateUser`)
- **단일 책임 원칙**: 하나의 Service는 하나의 도메인만 담당
- **우선**: 모든 비즈니스 로직은 Service에 구현

## Form Request (우선 사용)
- **생성**: `php artisan make:request`로 생성
- **메서드 활용**: `rules()`, `messages()`, `withValidator()`, `authorize()`
- **최대한 지양**: 컨트롤러에서 직접 유효성 검사 로직 작성

## Model (제한적 사용)
- **허용**: 관계 정의, 쿼리 스코프, 액세서/뮤테이터
- **최대한 지양**: 비즈니스 로직, 복잡한 계산, 외부 API 호출

# CSS/UI 규칙 (우선 적용)

## 기존 CSS 우선 사용
- **새로운 CSS 임의 작성 최대한 지양**
- **`publishing/` 디렉토리 기존 CSS 참고 우선**
- **기존 CSS와 충돌 시**: 새로운 CSS 추가보다 기존 CSS 수정 우선
- **CSS 클래스명과 구조 그대로 유지**

## UI 컴포넌트
- **모달, 팝업 등**: 기존 디자인 시스템 준수
- **기존 CSS 클래스명 변경 최대한 지양**
- **새로운 UI 요소**: 기존 CSS 클래스 재사용 우선

# 데이터 관리 규칙

## 마이그레이션 파일 관리 (우선 적용)
- **CREATE 마이그레이션 우선**: 테이블 생성 시 최종 스키마를 한 번에 정의
- **테이블 수정 시**: 새로운 마이그레이션 파일 생성 금지, 기존 CREATE 파일 직접 수정
- **수정 사항**: 컬럼 추가, 수정, 삭제, 인덱스 변경 등 모든 스키마 변경사항을 CREATE 파일에 반영
- **마이그레이션 파일 정리**: CREATE 파일만 유지, MODIFY/ADD 파일은 삭제하여 관리 복잡성 줄임
- **실제 DB 스키마와 동기화**: 마이그레이션 파일이 실제 테이블 구조와 일치하도록 유지

## 마이그레이션
- **테이블 생성**: 최종 스키마를 한 번에 정의
- **중간 마이그레이션**: 불필요한 파일 삭제하여 관리 복잡성 줄임

## 시더
- **하나의 테이블**: 하나의 시더만 생성
- **파일명**: 테이블명과 동일하게 작성

## 데이터 표시
- **값이 없을 때**: 공백(`''`)으로 표시
- **가짜 데이터나 임시 텍스트 표시 최대한 지양**

# 코드 검증 규칙

## 개발 시 우선 체크리스트
1. **컨트롤러**: 비즈니스 로직이 Service로 위임되었는가?
2. **Blade**: `<style>`, `<script>` 태그가 최소화되었는가?
3. **유효성 검사**: Form Request를 사용했는가?
4. **CSS/JS**: 외부 파일로 분리되었는가?
5. **Model**: 비즈니스 로직이 Service로 이동되었는가?
6. **마이그레이션**: CREATE 파일만 유지하고 실제 DB 스키마와 동기화되었는가?

## 위반 시 우선 수정
- **아키텍처 분리 위반**: 우선 Service 클래스로 이동 검토
- **CSS/JS 혼재**: 우선 외부 파일로 분리 검토
- **컨트롤러 비대화**: 우선 로직을 Service로 위임 검토
- **마이그레이션 파일 복잡화**: 우선 CREATE 파일만 유지하고 실제 DB 스키마와 동기화 검토

## 예외 상황 고려
- **간단한 조건문**: Blade에서 직접 처리해도 무방
- **일회성 스타일**: 간단한 인라인 스타일 허용
- **간단한 유효성**: 컨트롤러에서 기본 검증 허용
- **성능상 이유**: 불가피한 경우 Service 분리 지연 가능